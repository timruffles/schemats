/* tslint:disable */

/**
 * AUTO-GENERATED FILE @ 2020-05-23 17:31:07 - DO NOT EDIT!
 *
 * This file was automatically generated by schemats v.3.0.3
 * $ schemats generate -c postgresql://localhost:5432/gitdoc_dev -C -t migration -t external_auth -t app_user -s public
 *
 */

export namespace MigrationFields {
    export type id = number;
    export type data = Object;

}

export class Migration {
    static readonly fieldNames = ["id", "data"] as const;
    static readonly insertFields = ["id", "data"] as const;
    static readonly namesToColumns = {
        "id": "id",
        "data": "data"
    } as const;

    constructor(
        readonly id: MigrationFields.id,
        readonly data: MigrationFields.data
    ) { }

    forDb() {
        return { id: this.id, data: this.data }
    }
}

export namespace ExternalAuthFields {
    export type appUserId = number;
    export type provider = string;
    export type accessToken = string;
    export type refreshToken = string | null;
    export type createdAt = Date | null;
    export type updatedAt = Date | null;

}

export class ExternalAuth {
    static readonly fieldNames = ["appUserId", "provider", "accessToken", "refreshToken", "createdAt", "updatedAt"] as const;
    static readonly insertFields = ["appUserId", "provider", "accessToken", "refreshToken"] as const;
    static readonly namesToColumns = {
        "appUserId": "app_user_id",
        "provider": "provider",
        "accessToken": "access_token",
        "refreshToken": "refresh_token",
        "createdAt": "created_at",
        "updatedAt": "updated_at"
    } as const;

    constructor(
        readonly appUserId: ExternalAuthFields.appUserId,
        readonly provider: ExternalAuthFields.provider,
        readonly accessToken: ExternalAuthFields.accessToken,
        readonly refreshToken: ExternalAuthFields.refreshToken,
        readonly createdAt: ExternalAuthFields.createdAt,
        readonly updatedAt: ExternalAuthFields.updatedAt
    ) { }

    forDb() {
        return { app_user_id: this.appUserId, provider: this.provider, access_token: this.accessToken, refresh_token: this.refreshToken, created_at: this.createdAt, updated_at: this.updatedAt }
    }
}

export namespace AppUserFields {
    export type id = number;
    export type createdAt = Date | null;
    export type updatedAt = Date | null;

}

export class AppUser {
    static readonly fieldNames = ["id", "createdAt", "updatedAt"] as const;
    static readonly insertFields = [] as const;
    static readonly namesToColumns = {
        "id": "id",
        "createdAt": "created_at",
        "updatedAt": "updated_at"
    } as const;

    constructor(
        readonly id: AppUserFields.id,
        readonly createdAt: AppUserFields.createdAt,
        readonly updatedAt: AppUserFields.updatedAt
    ) { }

    forDb() {
        return { id: this.id, created_at: this.createdAt, updated_at: this.updatedAt }
    }
}
